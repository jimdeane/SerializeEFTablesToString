// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SerializeEFTablesToStringTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TablesSpecifiedWithSpecifiedColumns")]
    public partial class TablesSpecifiedWithSpecifiedColumnsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TablesSpecifiedWithSpecifiedColumns.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TablesSpecifiedWithSpecifiedColumns", @"	To allow a list of columns to be specified for each taable
	the syntax for the specification must be allowed to be  list of 
	strings representing the tables required with columns in list 
	between square brackets for example:
		""Policy,Party[party_unique_ref,surname,forename]""
	where all the columns for Policy are required while only three columns for Party are required
	Also ""Policy[]"" is also allowed meaning all columns", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Simple, one table requesting all columns")]
        public virtual void SimpleOneTableRequestingAllColumns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple, one table requesting all columns", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("a parameter string \"Policy_Component\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "table",
                        "columns",
                        "isExcludded"});
            table1.AddRow(new string[] {
                        "Policy_Component",
                        "*",
                        "false"});
#line 13
 testRunner.Then("the required table and Columns should be output", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Simple, one table with an empty columns list therefore requesting all columns")]
        public virtual void SimpleOneTableWithAnEmptyColumnsListThereforeRequestingAllColumns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple, one table with an empty columns list therefore requesting all columns", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("a parameter string \"Policy_Option[]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "table",
                        "columns",
                        "isExcludded"});
            table2.AddRow(new string[] {
                        "Policy_Option",
                        "*",
                        "false"});
#line 19
 testRunner.Then("the required table and Columns should be output", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One table with list of columns to include")]
        public virtual void OneTableWithListOfColumnsToInclude()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One table with list of columns to include", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("a parameter string \"Policy_Component[product_code;policy_number;policy_component_" +
                    "sequence;product_component_code;start_date;end_date]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "table",
                        "columns"});
            table3.AddRow(new string[] {
                        "Policy_Component",
                        "[product_code],[policy_number],[policy_component_sequence],[product_component_cod" +
                            "e],[start_date],[end_date]"});
#line 25
 testRunner.Then("the required table and Columns should be output", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Two tables one requesting all columns the other a limited set")]
        public virtual void TwoTablesOneRequestingAllColumnsTheOtherALimitedSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two tables one requesting all columns the other a limited set", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("a parameter string \"Policy_Component[],Policy_Option[payment_frequency;sum_assure" +
                    "d;insured_term]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "table",
                        "columns",
                        "isExcludded"});
            table4.AddRow(new string[] {
                        "Policy_Component",
                        "*",
                        "false"});
            table4.AddRow(new string[] {
                        "Policy_Option",
                        "[payment_frequency],[sum_assured],[insured_term]",
                        "false"});
#line 31
 testRunner.Then("the required table and Columns should be output", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One table with a list of columns to exclude")]
        public virtual void OneTableWithAListOfColumnsToExclude()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One table with a list of columns to exclude", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given(@"a parameter string ""Policy_Option[!policy_option_id;policy_component_id;policy_number;product_component_code;product_code;product_option_code;status;status_change_date;start_date;end_date;expected_start_date;date_creat;premium_amount;benefit_amount;retirement_age;quote_id;additional_premium_component;payment_frequency;sum_assured;insured_term;additional_nominal_charge;additional_multiplicative_charge;smoker""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "table",
                        "columns",
                        "isExcludded"});
            table5.AddRow(new string[] {
                        "Policy_Option",
                        "[occupation_class],[requested_start_date]",
                        "false"});
#line 38
 testRunner.Then("the required table and Columns should be output", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
